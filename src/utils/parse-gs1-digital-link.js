
class GS1DigitalLink {
    regexes = {
        "10": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "11": "(\\d{6})",
        "12": "(\\d{6})",
        "13": "(\\d{6})",
        "15": "(\\d{6})",
        "16": "(\\d{6})",
        "17": "(\\d{6})",
        "20": "(\\d{2})",
        "21": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "22": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "30": "(\\d{0,8})",
        "37": "(\\d{0,8})",
        "90": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "91": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "92": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "93": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "94": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "95": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "96": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "97": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "98": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "99": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,90})",
        "240": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "241": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "242": "(\\d{0,6})",
        "243": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "250": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "251": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "253": "(\\d{13})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,17})",
        "254": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "255": "(\\d{13})(\\d{0,12})",
        "400": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "401": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "402": "(\\d{17})",
        "403": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "410": "(\\d{13})",
        "411": "(\\d{13})",
        "412": "(\\d{13})",
        "413": "(\\d{13})",
        "414": "(\\d{13})",
        "415": "(\\d{13})",
        "416": "(\\d{13})",
        "420": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "421": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,9})",
        "422": "(\\d{3})",
        "423": "(\\d{3})(\\d{0,12})",
        "424": "(\\d{3})",
        "425": "(\\d{3})(\\d{0,12})",
        "426": "(\\d{3})",
        "427": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,3})",
        "710": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "711": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "712": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "713": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "714": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "3100": "(\\d{6})",
        "3101": "(\\d{6})",
        "3102": "(\\d{6})",
        "3103": "(\\d{6})",
        "3104": "(\\d{6})",
        "3105": "(\\d{6})",
        "3110": "(\\d{6})",
        "3111": "(\\d{6})",
        "3112": "(\\d{6})",
        "3113": "(\\d{6})",
        "3114": "(\\d{6})",
        "3115": "(\\d{6})",
        "3120": "(\\d{6})",
        "3121": "(\\d{6})",
        "3122": "(\\d{6})",
        "3123": "(\\d{6})",
        "3124": "(\\d{6})",
        "3125": "(\\d{6})",
        "3130": "(\\d{6})",
        "3131": "(\\d{6})",
        "3132": "(\\d{6})",
        "3133": "(\\d{6})",
        "3134": "(\\d{6})",
        "3135": "(\\d{6})",
        "3140": "(\\d{6})",
        "3141": "(\\d{6})",
        "3142": "(\\d{6})",
        "3143": "(\\d{6})",
        "3144": "(\\d{6})",
        "3145": "(\\d{6})",
        "3150": "(\\d{6})",
        "3151": "(\\d{6})",
        "3152": "(\\d{6})",
        "3153": "(\\d{6})",
        "3154": "(\\d{6})",
        "3155": "(\\d{6})",
        "3160": "(\\d{6})",
        "3161": "(\\d{6})",
        "3162": "(\\d{6})",
        "3163": "(\\d{6})",
        "3164": "(\\d{6})",
        "3165": "(\\d{6})",
        "3200": "(\\d{6})",
        "3201": "(\\d{6})",
        "3202": "(\\d{6})",
        "3203": "(\\d{6})",
        "3204": "(\\d{6})",
        "3205": "(\\d{6})",
        "3210": "(\\d{6})",
        "3211": "(\\d{6})",
        "3212": "(\\d{6})",
        "3213": "(\\d{6})",
        "3214": "(\\d{6})",
        "3215": "(\\d{6})",
        "3220": "(\\d{6})",
        "3221": "(\\d{6})",
        "3222": "(\\d{6})",
        "3223": "(\\d{6})",
        "3224": "(\\d{6})",
        "3225": "(\\d{6})",
        "3230": "(\\d{6})",
        "3231": "(\\d{6})",
        "3232": "(\\d{6})",
        "3233": "(\\d{6})",
        "3234": "(\\d{6})",
        "3235": "(\\d{6})",
        "3240": "(\\d{6})",
        "3241": "(\\d{6})",
        "3242": "(\\d{6})",
        "3243": "(\\d{6})",
        "3244": "(\\d{6})",
        "3245": "(\\d{6})",
        "3250": "(\\d{6})",
        "3251": "(\\d{6})",
        "3252": "(\\d{6})",
        "3253": "(\\d{6})",
        "3254": "(\\d{6})",
        "3255": "(\\d{6})",
        "3260": "(\\d{6})",
        "3261": "(\\d{6})",
        "3262": "(\\d{6})",
        "3263": "(\\d{6})",
        "3264": "(\\d{6})",
        "3265": "(\\d{6})",
        "3270": "(\\d{6})",
        "3271": "(\\d{6})",
        "3272": "(\\d{6})",
        "3273": "(\\d{6})",
        "3274": "(\\d{6})",
        "3275": "(\\d{6})",
        "3280": "(\\d{6})",
        "3281": "(\\d{6})",
        "3282": "(\\d{6})",
        "3283": "(\\d{6})",
        "3284": "(\\d{6})",
        "3285": "(\\d{6})",
        "3290": "(\\d{6})",
        "3291": "(\\d{6})",
        "3292": "(\\d{6})",
        "3293": "(\\d{6})",
        "3294": "(\\d{6})",
        "3295": "(\\d{6})",
        "3300": "(\\d{6})",
        "3301": "(\\d{6})",
        "3302": "(\\d{6})",
        "3303": "(\\d{6})",
        "3304": "(\\d{6})",
        "3305": "(\\d{6})",
        "3310": "(\\d{6})",
        "3311": "(\\d{6})",
        "3312": "(\\d{6})",
        "3313": "(\\d{6})",
        "3314": "(\\d{6})",
        "3315": "(\\d{6})",
        "3320": "(\\d{6})",
        "3321": "(\\d{6})",
        "3322": "(\\d{6})",
        "3323": "(\\d{6})",
        "3324": "(\\d{6})",
        "3325": "(\\d{6})",
        "3330": "(\\d{6})",
        "3331": "(\\d{6})",
        "3332": "(\\d{6})",
        "3333": "(\\d{6})",
        "3334": "(\\d{6})",
        "3335": "(\\d{6})",
        "3340": "(\\d{6})",
        "3341": "(\\d{6})",
        "3342": "(\\d{6})",
        "3343": "(\\d{6})",
        "3344": "(\\d{6})",
        "3345": "(\\d{6})",
        "3350": "(\\d{6})",
        "3351": "(\\d{6})",
        "3352": "(\\d{6})",
        "3353": "(\\d{6})",
        "3354": "(\\d{6})",
        "3355": "(\\d{6})",
        "3360": "(\\d{6})",
        "3361": "(\\d{6})",
        "3362": "(\\d{6})",
        "3363": "(\\d{6})",
        "3364": "(\\d{6})",
        "3365": "(\\d{6})",
        "3370": "(\\d{6})",
        "3371": "(\\d{6})",
        "3372": "(\\d{6})",
        "3373": "(\\d{6})",
        "3374": "(\\d{6})",
        "3375": "(\\d{6})",
        "3400": "(\\d{6})",
        "3401": "(\\d{6})",
        "3402": "(\\d{6})",
        "3403": "(\\d{6})",
        "3404": "(\\d{6})",
        "3405": "(\\d{6})",
        "3410": "(\\d{6})",
        "3411": "(\\d{6})",
        "3412": "(\\d{6})",
        "3413": "(\\d{6})",
        "3414": "(\\d{6})",
        "3415": "(\\d{6})",
        "3420": "(\\d{6})",
        "3421": "(\\d{6})",
        "3422": "(\\d{6})",
        "3423": "(\\d{6})",
        "3424": "(\\d{6})",
        "3425": "(\\d{6})",
        "3430": "(\\d{6})",
        "3431": "(\\d{6})",
        "3432": "(\\d{6})",
        "3433": "(\\d{6})",
        "3434": "(\\d{6})",
        "3435": "(\\d{6})",
        "3440": "(\\d{6})",
        "3441": "(\\d{6})",
        "3442": "(\\d{6})",
        "3443": "(\\d{6})",
        "3444": "(\\d{6})",
        "3445": "(\\d{6})",
        "3450": "(\\d{6})",
        "3451": "(\\d{6})",
        "3452": "(\\d{6})",
        "3453": "(\\d{6})",
        "3454": "(\\d{6})",
        "3455": "(\\d{6})",
        "3460": "(\\d{6})",
        "3461": "(\\d{6})",
        "3462": "(\\d{6})",
        "3463": "(\\d{6})",
        "3464": "(\\d{6})",
        "3465": "(\\d{6})",
        "3470": "(\\d{6})",
        "3471": "(\\d{6})",
        "3472": "(\\d{6})",
        "3473": "(\\d{6})",
        "3474": "(\\d{6})",
        "3475": "(\\d{6})",
        "3480": "(\\d{6})",
        "3481": "(\\d{6})",
        "3482": "(\\d{6})",
        "3483": "(\\d{6})",
        "3484": "(\\d{6})",
        "3485": "(\\d{6})",
        "3490": "(\\d{6})",
        "3491": "(\\d{6})",
        "3492": "(\\d{6})",
        "3493": "(\\d{6})",
        "3494": "(\\d{6})",
        "3495": "(\\d{6})",
        "3500": "(\\d{6})",
        "3501": "(\\d{6})",
        "3502": "(\\d{6})",
        "3503": "(\\d{6})",
        "3504": "(\\d{6})",
        "3505": "(\\d{6})",
        "3510": "(\\d{6})",
        "3511": "(\\d{6})",
        "3512": "(\\d{6})",
        "3513": "(\\d{6})",
        "3514": "(\\d{6})",
        "3515": "(\\d{6})",
        "3520": "(\\d{6})",
        "3521": "(\\d{6})",
        "3522": "(\\d{6})",
        "3523": "(\\d{6})",
        "3524": "(\\d{6})",
        "3525": "(\\d{6})",
        "3530": "(\\d{6})",
        "3531": "(\\d{6})",
        "3532": "(\\d{6})",
        "3533": "(\\d{6})",
        "3534": "(\\d{6})",
        "3535": "(\\d{6})",
        "3540": "(\\d{6})",
        "3541": "(\\d{6})",
        "3542": "(\\d{6})",
        "3543": "(\\d{6})",
        "3544": "(\\d{6})",
        "3545": "(\\d{6})",
        "3550": "(\\d{6})",
        "3551": "(\\d{6})",
        "3552": "(\\d{6})",
        "3553": "(\\d{6})",
        "3554": "(\\d{6})",
        "3555": "(\\d{6})",
        "3560": "(\\d{6})",
        "3561": "(\\d{6})",
        "3562": "(\\d{6})",
        "3563": "(\\d{6})",
        "3564": "(\\d{6})",
        "3565": "(\\d{6})",
        "3570": "(\\d{6})",
        "3571": "(\\d{6})",
        "3572": "(\\d{6})",
        "3573": "(\\d{6})",
        "3574": "(\\d{6})",
        "3575": "(\\d{6})",
        "3600": "(\\d{6})",
        "3601": "(\\d{6})",
        "3602": "(\\d{6})",
        "3603": "(\\d{6})",
        "3604": "(\\d{6})",
        "3605": "(\\d{6})",
        "3610": "(\\d{6})",
        "3611": "(\\d{6})",
        "3612": "(\\d{6})",
        "3613": "(\\d{6})",
        "3614": "(\\d{6})",
        "3615": "(\\d{6})",
        "3620": "(\\d{6})",
        "3621": "(\\d{6})",
        "3622": "(\\d{6})",
        "3623": "(\\d{6})",
        "3624": "(\\d{6})",
        "3625": "(\\d{6})",
        "3630": "(\\d{6})",
        "3631": "(\\d{6})",
        "3632": "(\\d{6})",
        "3633": "(\\d{6})",
        "3634": "(\\d{6})",
        "3635": "(\\d{6})",
        "3640": "(\\d{6})",
        "3641": "(\\d{6})",
        "3642": "(\\d{6})",
        "3643": "(\\d{6})",
        "3644": "(\\d{6})",
        "3645": "(\\d{6})",
        "3650": "(\\d{6})",
        "3651": "(\\d{6})",
        "3652": "(\\d{6})",
        "3653": "(\\d{6})",
        "3654": "(\\d{6})",
        "3655": "(\\d{6})",
        "3660": "(\\d{6})",
        "3661": "(\\d{6})",
        "3662": "(\\d{6})",
        "3663": "(\\d{6})",
        "3664": "(\\d{6})",
        "3665": "(\\d{6})",
        "3670": "(\\d{6})",
        "3671": "(\\d{6})",
        "3672": "(\\d{6})",
        "3673": "(\\d{6})",
        "3674": "(\\d{6})",
        "3675": "(\\d{6})",
        "3680": "(\\d{6})",
        "3681": "(\\d{6})",
        "3682": "(\\d{6})",
        "3683": "(\\d{6})",
        "3684": "(\\d{6})",
        "3685": "(\\d{6})",
        "3690": "(\\d{6})",
        "3691": "(\\d{6})",
        "3692": "(\\d{6})",
        "3693": "(\\d{6})",
        "3694": "(\\d{6})",
        "3695": "(\\d{6})",
        "3900": "(\\d{0,15})",
        "3901": "(\\d{0,15})",
        "3902": "(\\d{0,15})",
        "3903": "(\\d{0,15})",
        "3904": "(\\d{0,15})",
        "3905": "(\\d{0,15})",
        "3906": "(\\d{0,15})",
        "3907": "(\\d{0,15})",
        "3908": "(\\d{0,15})",
        "3909": "(\\d{0,15})",
        "3910": "(\\d{3})(\\d{0,15})",
        "3911": "(\\d{3})(\\d{0,15})",
        "3912": "(\\d{3})(\\d{0,15})",
        "3913": "(\\d{3})(\\d{0,15})",
        "3914": "(\\d{3})(\\d{0,15})",
        "3915": "(\\d{3})(\\d{0,15})",
        "3916": "(\\d{3})(\\d{0,15})",
        "3917": "(\\d{3})(\\d{0,15})",
        "3918": "(\\d{3})(\\d{0,15})",
        "3919": "(\\d{3})(\\d{0,15})",
        "3920": "(\\d{0,15})",
        "3921": "(\\d{0,15})",
        "3922": "(\\d{0,15})",
        "3923": "(\\d{0,15})",
        "3924": "(\\d{0,15})",
        "3925": "(\\d{0,15})",
        "3926": "(\\d{0,15})",
        "3927": "(\\d{0,15})",
        "3928": "(\\d{0,15})",
        "3929": "(\\d{0,15})",
        "3930": "(\\d{3})(\\d{0,15})",
        "3931": "(\\d{3})(\\d{0,15})",
        "3932": "(\\d{3})(\\d{0,15})",
        "3933": "(\\d{3})(\\d{0,15})",
        "3934": "(\\d{3})(\\d{0,15})",
        "3935": "(\\d{3})(\\d{0,15})",
        "3936": "(\\d{3})(\\d{0,15})",
        "3937": "(\\d{3})(\\d{0,15})",
        "3938": "(\\d{3})(\\d{0,15})",
        "3939": "(\\d{3})(\\d{0,15})",
        "3940": "(\\d{4})",
        "3941": "(\\d{4})",
        "3942": "(\\d{4})",
        "3943": "(\\d{4})",
        "7001": "(\\d{13})",
        "7002": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "7003": "(\\d{10})",
        "7004": "(\\d{0,4})",
        "7005": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,12})",
        "7006": "(\\d{6})",
        "7007": "(\\d{6,12})",
        "7008": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,3})",
        "7009": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,10})",
        "7010": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,2})",
        "7020": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "7021": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "7022": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "7023": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "7030": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7031": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7032": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7033": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7034": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7035": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7036": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7037": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7038": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7039": "(\\d{3})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,27})",
        "7230": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7231": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7232": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7233": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7234": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7235": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7236": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7237": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7238": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "7239": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{2,30})",
        "8001": "(\\d{14})",
        "8002": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "8003": "(\\d{14})([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,16})",
        "8004": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "8005": "(\\d{6})",
        "8006": "(\\d{14})(\\d{2})(\\d{2})",
        "8007": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,34})",
        "8008": "(\\d{8})(\\d{0,4})",
        "8009": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,50})",
        "8010": "([\\x23\\x2D\\x2F\\x30-\\x39\\x41-\\x5A]{0,30})",
        "8011": "(\\d{0,12})",
        "8012": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,20})",
        "8013": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,30})",
        "8017": "(\\d{18})",
        "8018": "(\\d{18})",
        "8019": "(\\d{0,10})",
        "8020": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,25})",
        "8026": "(\\d{14})(\\d{2})(\\d{2})",
        "8110": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,70})",
        "8111": "(\\d{4})",
        "8112": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,70})",
        "8200": "([\\x21-\\x22\\x25-\\x2F\\x30-\\x3F\\x41-\\x5A\\x5F\\x61-\\x7A]{0,70})",
        "00": "(\\d{18})",
        "01": "(\\d{12,14}|\\d{8})",
        "02": "(\\d{14})"
    }

    checkDigitPositions = {
        "253": "13",
        "255": "13",
        "402": "L",
        "410": "L",
        "411": "L",
        "412": "L",
        "413": "L",
        "414": "L",
        "415": "L",
        "416": "L",
        "8003": "14",
        "8006": "14",
        "8017": "L",
        "8018": "L",
        "8026": "14",
        "00": "L",
        "01": "L",
        "02": "L"
    }

	calculateCheckDigit(ai, value) {
		let counter = 0;
		let total = 0;
		let l;

		if (this.checkDigitPositions[ai] == "L") {
			l = value.length;
		} else {
			l = parseInt(this.checkDigitPositions[ai]);
		}

		let multiplier;
		for (let i = l - 2; i >= 0; i--) {
			let d = value.substring(i, i + 1);
			if (counter % 2 === 0) {
				multiplier = 3;
			} else {
				multiplier = 1;
			}

			total += d * multiplier;
			counter++;
		}

		return (10 - (total % 10)) % 10;
	}

	verifyCheckDigit(ai, value) {
		let expectedCheckDigit;
        let checkDigitPosition = this.checkDigitPositions[ai];
		let result = true;

        if (checkDigitPosition !== undefined) {
            expectedCheckDigit = this.calculateCheckDigit(ai, value);

            if (checkDigitPosition == "L") {
                checkDigitPosition = value.length;
            } else {
                checkDigitPosition = parseInt(checkDigitPosition);
            }

            let actualCheckDigit = parseInt(value.charAt(checkDigitPosition - 1));
	
            if (actualCheckDigit !== expectedCheckDigit) { 
                result = false;
                throw new Error(`Invalid check digit: An invalid check digit was found for the primary identification key (${ai})${value}; the correct check digit should be ${expectedCheckDigit} at position ${checkDigitPosition}`);
            }
		}

		return result;
	}

	verifySyntax(ai, value) {
		let re = new RegExp("^" + this.regexes[ai] + "$");

		if (!re.test(value)) {
			throw new Error(`Syntax error: Invalid syntax for value of (${ai}): ${value}`);
		}
	}

    parse(link) {
        let obj = {};
        let cursor = 0;	
        let queryString = "";
        let uriPathInfo = "";
        let candidates = {};
        
        if (link.indexOf("http://") === 0) { cursor = 7 }
        if (link.indexOf("https://") === 0) { cursor = 8 }

        let firstSlash = link.substr(cursor).indexOf("/");
        let firstQuestionMark = link.substr(cursor).indexOf("?");
        
        if (firstQuestionMark > -1) {
            queryString = link.substr(cursor).substr(1 + firstQuestionMark);
            uriPathInfo = link.substr(cursor).substring(firstSlash, firstQuestionMark);
        } else {
            uriPathInfo = link.substr(cursor).substr(firstSlash);
            
            let firstFragment = uriPathInfo.indexOf("#");
            if (firstFragment > -1) {
                uriPathInfo = uriPathInfo.substring(0,firstFragment);
            }
        }

        // process URI path information
        let pathElements = uriPathInfo.substr(1).split("/");
        let l = pathElements.length;
        let pathElementIndex = l - 2;

        while (pathElementIndex >= 0) {
            candidates[pathElements[pathElementIndex]] = decodeURIComponent(pathElements[1 + pathElementIndex]);
            pathElementIndex -= 2;
        }

        
        if (queryString !== "") {
            // if semicolon was used as delimiter between key=value pairs, replace with ampersand as delimiter
            queryString = queryString.replace(new RegExp(";", 'g'), "&");

            let firstFragment = queryString.indexOf("#");
            if (firstFragment > -1) {
                queryString = queryString.substring(0, firstFragment);
            }
            
            let pairs = queryString.split("&");
            for (let i = 0; i < pairs.length; i++) {
                var p = pairs[i].split("=");
                if (p[0] !== null && p[1] !== null) {
                    candidates[p[0]]=decodeURIComponent(p[1]);
                }
            }
        }
        
        // var allnumeric = new RegExp("^\\d+$");

        // process candidates;
        // for (var k in candidates) {
        //     if (candidates.hasOwnProperty(k)) {
        //     if (!(allnumeric.test(k))) {
        //             // for keys that are not all-numeric, attempt to convert to all-numeric AI equivalent
        //             if (this.shortCodeToNumeric.hasOwnProperty(k)) {
        //                 var numkey = this.shortCodeToNumeric[k];
        //                 candidates[numkey]=candidates[k];
        //                 delete candidates[k];
        //             } else {
        //                 // or otherwise remove from candidates map if it doesn't relate to a GS1 Application Identifier
        //                 delete candidates[k];
        //             }
        //     }
        //     }
        // }			
                
        for (let k in candidates) {
            if (candidates.hasOwnProperty(k)) {
                this.verifySyntax(k, candidates[k]);
                this.verifyCheckDigit(k, candidates[k]);

                if (k == "01" || k == "(01)" || k == "02" || k == "(02)") {
                    obj[k] = candidates[k].padStart(14, '0');
                } else {
                    obj[k] = candidates[k];
                }
            }
        }
                            
        return obj;
    }
}

const link = new GS1DigitalLink();



const is = qrCode => {
    return typeof qrCode === 'string' && (        
        qrCode.match(/^(https?|HTTPS?):(\/\/((([^\/?#]*)@)?([^\/?#:]*)(:([^\/?#]*))?))?([^?#]*)(((\/(01|8006|8013|8010|414|415|417|8017|8018|255|00|253|401|402|8003|8004)\/)(\d{4}[^\/]+)(\/[^/]+\/[^/]+)?[/]?(\?([^?\n]*))?(#([^\n]*))?))/) ||
        qrCode.match(/^(https?|HTTPS?):(\/\/((([^\/?#]*)@)?([^\/?#:]*)(:([^\/?#]*))?))?([^?#]*)((\/[0-9A-Za-z_-]{10,}$))/)
    );
}

const parse = qrCode => {
    try {
        let value = link.parse(qrCode);
        return value;
    } catch (e) {
        console.log(e);
    }
}

export default { is, parse };